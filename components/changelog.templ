package components

import "html/template"

type ChangelogContainerArgs struct {
	CurrentURL     string
	HasMoreArticle bool
}

// Contains the article list and footer
templ ChangelogContainer(args ChangelogContainerArgs) {
	<main id="changelog-container" class="o-mx-4 sm:o-mx-0">
		{ children... }
		<div id="skeleton" class="o-hidden">
			<div class="o-animate-pulse o-w-full o-space-y-4 o-mt-12">
				<div class="o-w-3/4 o-h-9 o-rounded o-bg-black/10 dark:o-bg-white/10"></div>
				<div class="o-w-full o-h-5 o-rounded o-bg-black/10 dark:o-bg-white/10"></div>
				<div class="o-w-full o-h-32 o-rounded o-bg-black/10 dark:o-bg-white/10"></div>
			</div>
		</div>
	</main>
	if args.HasMoreArticle {
		@templ.FromGoHTML(infiniteScrollTemplate, args.CurrentURL)
	}
}

var infiniteScrollTemplate = template.Must(template.New("infiniteScrollTemplate").Parse(`
<script>
	const skeleton = document.getElementById("skeleton")
	const container = document.getElementById("changelog-container")
	const currentPageURL = new URL("{{ . }}")
	const params = currentPageURL.searchParams;
	let isLoadingNextPage = false
	let hasMore = true

	function loadStarted() {
		isLoadingNextPage = true
		skeleton.style.display = "block"
	}

	function loadEnded() {
		isLoadingNextPage = false
		skeleton.style.display = "none"
	}

	async function loadNextPage(url) {
		try {
			loadStarted()
			const currentPage = parseInt(params.get('page')) || 1;
			params.set('page', currentPage + 1);
 			// don't load full html page, only articles list
			params.set('articles', "true");

			const res = await fetch(currentPageURL)
			if (!res.ok || res.status === 204) {
				hasMore = false
			}
			const newArticles = await res.text()
			skeleton.insertAdjacentHTML('beforebegin', newArticles)
		} finally {
			loadEnded()
		}
	}

	window.addEventListener("scroll", () => {
		const bufferPx = 100 // start loading before reaching end of container
		const endReached = window.scrollY + window.innerHeight + bufferPx >= container.scrollHeight
		if(endReached && !isLoadingNextPage && hasMore){
			loadNextPage()
		}
	})
</script>
`,
))
