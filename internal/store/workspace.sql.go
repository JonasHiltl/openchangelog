// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: workspace.sql

package store

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createWorkspace = `-- name: CreateWorkspace :one
INSERT INTO workspaces (
    id, name
) VALUES ($1, $2)
RETURNING id, name
`

type CreateWorkspaceParams struct {
	ID   string
	Name string
}

func (q *Queries) CreateWorkspace(ctx context.Context, arg CreateWorkspaceParams) (Workspace, error) {
	row := q.db.QueryRow(ctx, createWorkspace, arg.ID, arg.Name)
	var i Workspace
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const deleteWorkspace = `-- name: DeleteWorkspace :exec
DELETE FROM workspaces
WHERE id =$1
`

func (q *Queries) DeleteWorkspace(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteWorkspace, id)
	return err
}

const getWorkspace = `-- name: GetWorkspace :one
SELECT w.id, w.name, t.key, t.workspace_id 
FROM workspaces as w
JOIN tokens as t ON t.workspace_id = w.id
WHERE id = $1
`

type GetWorkspaceRow struct {
	Workspace Workspace
	Token     Token
}

func (q *Queries) GetWorkspace(ctx context.Context, id string) (GetWorkspaceRow, error) {
	row := q.db.QueryRow(ctx, getWorkspace, id)
	var i GetWorkspaceRow
	err := row.Scan(
		&i.Workspace.ID,
		&i.Workspace.Name,
		&i.Token.Key,
		&i.Token.WorkspaceID,
	)
	return i, err
}

const updateWorkspace = `-- name: UpdateWorkspace :one
UPDATE workspaces
SET name = coalesce($2, name)
WHERE id = $1
RETURNING id, name
`

type UpdateWorkspaceParams struct {
	ID   string
	Name pgtype.Text
}

func (q *Queries) UpdateWorkspace(ctx context.Context, arg UpdateWorkspaceParams) (Workspace, error) {
	row := q.db.QueryRow(ctx, updateWorkspace, arg.ID, arg.Name)
	var i Workspace
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}
