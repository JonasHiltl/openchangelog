// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: source.sql

package store

import (
	"context"
)

const createGHSource = `-- name: CreateGHSource :one
INSERT INTO gh_sources (
    workspace_id, owner, repo, path, installation_id
) VALUES ($1, $2, $3, $4, $5)
RETURNING id, workspace_id, owner, repo, path, installation_id
`

type CreateGHSourceParams struct {
	WorkspaceID    string
	Owner          string
	Repo           string
	Path           string
	InstallationID int64
}

func (q *Queries) CreateGHSource(ctx context.Context, arg CreateGHSourceParams) (GhSource, error) {
	row := q.db.QueryRow(ctx, createGHSource,
		arg.WorkspaceID,
		arg.Owner,
		arg.Repo,
		arg.Path,
		arg.InstallationID,
	)
	var i GhSource
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Owner,
		&i.Repo,
		&i.Path,
		&i.InstallationID,
	)
	return i, err
}

const deleteGHSource = `-- name: DeleteGHSource :exec
DELETE FROM gh_sources
WHERE workspace_id = $1 AND id = $2
`

type DeleteGHSourceParams struct {
	WorkspaceID string
	ID          int64
}

func (q *Queries) DeleteGHSource(ctx context.Context, arg DeleteGHSourceParams) error {
	_, err := q.db.Exec(ctx, deleteGHSource, arg.WorkspaceID, arg.ID)
	return err
}

const getGHSource = `-- name: GetGHSource :one
SELECT id, workspace_id, owner, repo, path, installation_id FROM gh_sources
WHERE workspace_id = $1 AND id = $2
`

type GetGHSourceParams struct {
	WorkspaceID string
	ID          int64
}

func (q *Queries) GetGHSource(ctx context.Context, arg GetGHSourceParams) (GhSource, error) {
	row := q.db.QueryRow(ctx, getGHSource, arg.WorkspaceID, arg.ID)
	var i GhSource
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Owner,
		&i.Repo,
		&i.Path,
		&i.InstallationID,
	)
	return i, err
}

const listGHSources = `-- name: ListGHSources :many
SELECT id, workspace_id, owner, repo, path, installation_id FROM gh_sources
WHERE workspace_id = $1
`

func (q *Queries) ListGHSources(ctx context.Context, workspaceID string) ([]GhSource, error) {
	rows, err := q.db.Query(ctx, listGHSources, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []GhSource
	for rows.Next() {
		var i GhSource
		if err := rows.Scan(
			&i.ID,
			&i.WorkspaceID,
			&i.Owner,
			&i.Repo,
			&i.Path,
			&i.InstallationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
