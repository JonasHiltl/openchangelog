// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0

package store

import (
	"database/sql/driver"
	"fmt"

	"github.com/jackc/pgx/v5/pgtype"
)

type SourceType string

const (
	SourceTypeGitHub SourceType = "GitHub"
)

func (e *SourceType) Scan(src interface{}) error {
	switch s := src.(type) {
	case []byte:
		*e = SourceType(s)
	case string:
		*e = SourceType(s)
	default:
		return fmt.Errorf("unsupported scan type for SourceType: %T", src)
	}
	return nil
}

type NullSourceType struct {
	SourceType SourceType
	Valid      bool // Valid is true if SourceType is not NULL
}

// Scan implements the Scanner interface.
func (ns *NullSourceType) Scan(value interface{}) error {
	if value == nil {
		ns.SourceType, ns.Valid = "", false
		return nil
	}
	ns.Valid = true
	return ns.SourceType.Scan(value)
}

// Value implements the driver Valuer interface.
func (ns NullSourceType) Value() (driver.Value, error) {
	if !ns.Valid {
		return nil, nil
	}
	return string(ns.SourceType), nil
}

type Changelog struct {
	ID          int64
	WorkspaceID string
	Title       pgtype.Text
	Subtitle    pgtype.Text
	SourceID    pgtype.Int8
	SourceType  NullSourceType
	LogoSrc     pgtype.Text
	LogoLink    pgtype.Text
	LogoAlt     pgtype.Text
	LogoHeight  pgtype.Text
	LogoWidth   pgtype.Text
	CreatedAt   pgtype.Timestamp
}

type ChangelogSource struct {
	ID             pgtype.Int8
	WorkspaceID    pgtype.Text
	Owner          pgtype.Text
	Repo           pgtype.Text
	Path           pgtype.Text
	InstallationID pgtype.Int8
}

type GhSource struct {
	ID             int64
	WorkspaceID    string
	Owner          string
	Repo           string
	Path           string
	InstallationID int64
}

type Token struct {
	Key         string
	WorkspaceID string
}

type Workspace struct {
	ID   string
	Name string
}
