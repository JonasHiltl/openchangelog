// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"

	"github.com/jackc/pgx/v5/pgtype"
)

const createChangelog = `-- name: CreateChangelog :one
INSERT INTO changelogs (
    workspace_id, title, subtitle, logo_src, logo_link, logo_alt, logo_height, logo_width
) VALUES ($1, $2, $3, $4, $5, $6, $7, $8)
RETURNING id, workspace_id, title, subtitle, source_id, source_type, logo_src, logo_link, logo_alt, logo_height, logo_width, created_at
`

type CreateChangelogParams struct {
	WorkspaceID string
	Title       pgtype.Text
	Subtitle    pgtype.Text
	LogoSrc     pgtype.Text
	LogoLink    pgtype.Text
	LogoAlt     pgtype.Text
	LogoHeight  pgtype.Text
	LogoWidth   pgtype.Text
}

func (q *Queries) CreateChangelog(ctx context.Context, arg CreateChangelogParams) (Changelog, error) {
	row := q.db.QueryRow(ctx, createChangelog,
		arg.WorkspaceID,
		arg.Title,
		arg.Subtitle,
		arg.LogoSrc,
		arg.LogoLink,
		arg.LogoAlt,
		arg.LogoHeight,
		arg.LogoWidth,
	)
	var i Changelog
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Title,
		&i.Subtitle,
		&i.SourceID,
		&i.SourceType,
		&i.LogoSrc,
		&i.LogoLink,
		&i.LogoAlt,
		&i.LogoHeight,
		&i.LogoWidth,
		&i.CreatedAt,
	)
	return i, err
}

const deleteChangelog = `-- name: DeleteChangelog :exec
DELETE FROM changelogs
WHERE workspace_id = $1 AND id =$2
`

type DeleteChangelogParams struct {
	WorkspaceID string
	ID          int64
}

func (q *Queries) DeleteChangelog(ctx context.Context, arg DeleteChangelogParams) error {
	_, err := q.db.Exec(ctx, deleteChangelog, arg.WorkspaceID, arg.ID)
	return err
}

const getChangelog = `-- name: GetChangelog :one
SELECT cl.id, cl.workspace_id, cl.title, cl.subtitle, cl.source_id, cl.source_type, cl.logo_src, cl.logo_link, cl.logo_alt, cl.logo_height, cl.logo_width, cl.created_at, s.id, s.workspace_id, s.owner, s.repo, s.path, s.installation_id
FROM changelogs cl
LEFT JOIN changelog_sources s on cl.source_id = s.id
WHERE cl.workspace_id = $1 AND cl.id = $2
`

type GetChangelogParams struct {
	WorkspaceID string
	ID          int64
}

type GetChangelogRow struct {
	Changelog       Changelog
	ChangelogSource ChangelogSource
}

func (q *Queries) GetChangelog(ctx context.Context, arg GetChangelogParams) (GetChangelogRow, error) {
	row := q.db.QueryRow(ctx, getChangelog, arg.WorkspaceID, arg.ID)
	var i GetChangelogRow
	err := row.Scan(
		&i.Changelog.ID,
		&i.Changelog.WorkspaceID,
		&i.Changelog.Title,
		&i.Changelog.Subtitle,
		&i.Changelog.SourceID,
		&i.Changelog.SourceType,
		&i.Changelog.LogoSrc,
		&i.Changelog.LogoLink,
		&i.Changelog.LogoAlt,
		&i.Changelog.LogoHeight,
		&i.Changelog.LogoWidth,
		&i.Changelog.CreatedAt,
		&i.ChangelogSource.ID,
		&i.ChangelogSource.WorkspaceID,
		&i.ChangelogSource.Owner,
		&i.ChangelogSource.Repo,
		&i.ChangelogSource.Path,
		&i.ChangelogSource.InstallationID,
	)
	return i, err
}

const listChangelogs = `-- name: ListChangelogs :many
SELECT cl.id, cl.workspace_id, cl.title, cl.subtitle, cl.source_id, cl.source_type, cl.logo_src, cl.logo_link, cl.logo_alt, cl.logo_height, cl.logo_width, cl.created_at, s.id, s.workspace_id, s.owner, s.repo, s.path, s.installation_id
FROM changelogs cl
LEFT JOIN changelog_sources s on cl.source_id = s.id
WHERE cl.workspace_id = $1
`

type ListChangelogsRow struct {
	Changelog       Changelog
	ChangelogSource ChangelogSource
}

func (q *Queries) ListChangelogs(ctx context.Context, workspaceID string) ([]ListChangelogsRow, error) {
	rows, err := q.db.Query(ctx, listChangelogs, workspaceID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []ListChangelogsRow
	for rows.Next() {
		var i ListChangelogsRow
		if err := rows.Scan(
			&i.Changelog.ID,
			&i.Changelog.WorkspaceID,
			&i.Changelog.Title,
			&i.Changelog.Subtitle,
			&i.Changelog.SourceID,
			&i.Changelog.SourceType,
			&i.Changelog.LogoSrc,
			&i.Changelog.LogoLink,
			&i.Changelog.LogoAlt,
			&i.Changelog.LogoHeight,
			&i.Changelog.LogoWidth,
			&i.Changelog.CreatedAt,
			&i.ChangelogSource.ID,
			&i.ChangelogSource.WorkspaceID,
			&i.ChangelogSource.Owner,
			&i.ChangelogSource.Repo,
			&i.ChangelogSource.Path,
			&i.ChangelogSource.InstallationID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateChangelog = `-- name: UpdateChangelog :one
UPDATE changelogs
SET
   title = coalesce($1, title),
   subtitle = coalesce($2, subtitle),
   logo_src = coalesce($3, logo_src),
   logo_link = coalesce($4, logo_link),
   logo_alt = coalesce($5, logo_alt),
   logo_height = coalesce($6, logo_height),
   logo_width = coalesce($7, logo_width)
WHERE workspace_id = $8 AND id = $9
RETURNING id, workspace_id, title, subtitle, source_id, source_type, logo_src, logo_link, logo_alt, logo_height, logo_width, created_at
`

type UpdateChangelogParams struct {
	Title       pgtype.Text
	Subtitle    pgtype.Text
	LogoSrc     pgtype.Text
	LogoLink    pgtype.Text
	LogoAlt     pgtype.Text
	LogoHeight  pgtype.Text
	LogoWidth   pgtype.Text
	WorkspaceID string
	ID          int64
}

func (q *Queries) UpdateChangelog(ctx context.Context, arg UpdateChangelogParams) (Changelog, error) {
	row := q.db.QueryRow(ctx, updateChangelog,
		arg.Title,
		arg.Subtitle,
		arg.LogoSrc,
		arg.LogoLink,
		arg.LogoAlt,
		arg.LogoHeight,
		arg.LogoWidth,
		arg.WorkspaceID,
		arg.ID,
	)
	var i Changelog
	err := row.Scan(
		&i.ID,
		&i.WorkspaceID,
		&i.Title,
		&i.Subtitle,
		&i.SourceID,
		&i.SourceType,
		&i.LogoSrc,
		&i.LogoLink,
		&i.LogoAlt,
		&i.LogoHeight,
		&i.LogoWidth,
		&i.CreatedAt,
	)
	return i, err
}

const updateChangelogSource = `-- name: UpdateChangelogSource :exec
UPDATE changelogs 
SET source_id = $1, source_type = $2
WHERE workspace_id = $3 AND id = $4
`

type UpdateChangelogSourceParams struct {
	SourceID    pgtype.Int8
	SourceType  NullSourceType
	WorkspaceID string
	ID          int64
}

func (q *Queries) UpdateChangelogSource(ctx context.Context, arg UpdateChangelogSourceParams) error {
	_, err := q.db.Exec(ctx, updateChangelogSource,
		arg.SourceID,
		arg.SourceType,
		arg.WorkspaceID,
		arg.ID,
	)
	return err
}
