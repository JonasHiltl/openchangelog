// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: query.sql

package db

import (
	"context"
)

const createToken = `-- name: CreateToken :exec
INSERT INTO tokens (
    key, workspace_id
) VALUES (
    $1, $2
)
`

type CreateTokenParams struct {
	Key         string
	WorkspaceID string
}

func (q *Queries) CreateToken(ctx context.Context, arg CreateTokenParams) error {
	_, err := q.db.Exec(ctx, createToken, arg.Key, arg.WorkspaceID)
	return err
}

const deleteWorkspace = `-- name: DeleteWorkspace :exec
DELETE FROM workspaces
WHERE id = $1
`

func (q *Queries) DeleteWorkspace(ctx context.Context, id string) error {
	_, err := q.db.Exec(ctx, deleteWorkspace, id)
	return err
}

const getToken = `-- name: GetToken :one
SELECT key, workspace_id FROM tokens
WHERE key = $1
`

func (q *Queries) GetToken(ctx context.Context, key string) (Token, error) {
	row := q.db.QueryRow(ctx, getToken, key)
	var i Token
	err := row.Scan(&i.Key, &i.WorkspaceID)
	return i, err
}

const getTokenByWorkspace = `-- name: GetTokenByWorkspace :one

SELECT key, workspace_id FROM tokens
WHERE workspace_id = $1
LIMIT 1
`

// technically a workspace can have multiple tokens, but domain only create one token when workspace is created
func (q *Queries) GetTokenByWorkspace(ctx context.Context, workspaceID string) (Token, error) {
	row := q.db.QueryRow(ctx, getTokenByWorkspace, workspaceID)
	var i Token
	err := row.Scan(&i.Key, &i.WorkspaceID)
	return i, err
}

const getWorkspace = `-- name: GetWorkspace :one
SELECT w.id, w.name, t.key, t.workspace_id
FROM workspaces w
LEFT JOIN tokens t ON w.id = t.workspace_id
WHERE id = $1
`

type GetWorkspaceRow struct {
	Workspace Workspace
	Token     Token
}

func (q *Queries) GetWorkspace(ctx context.Context, id string) (GetWorkspaceRow, error) {
	row := q.db.QueryRow(ctx, getWorkspace, id)
	var i GetWorkspaceRow
	err := row.Scan(
		&i.Workspace.ID,
		&i.Workspace.Name,
		&i.Token.Key,
		&i.Token.WorkspaceID,
	)
	return i, err
}

const getWorkspaceByToken = `-- name: GetWorkspaceByToken :one
SELECT w.id, w.name
FROM tokens t
JOIN workspaces w ON w.id = t.workspace_id
WHERE t.key = $1
`

func (q *Queries) GetWorkspaceByToken(ctx context.Context, key string) (Workspace, error) {
	row := q.db.QueryRow(ctx, getWorkspaceByToken, key)
	var i Workspace
	err := row.Scan(&i.ID, &i.Name)
	return i, err
}

const saveWorkspace = `-- name: SaveWorkspace :exec
INSERT INTO workspaces (
    id, name
) VALUES ($1, $2)
ON CONFLICT (id)
DO UPDATE SET name = $2
`

type SaveWorkspaceParams struct {
	ID   string
	Name string
}

func (q *Queries) SaveWorkspace(ctx context.Context, arg SaveWorkspaceParams) error {
	_, err := q.db.Exec(ctx, saveWorkspace, arg.ID, arg.Name)
	return err
}
